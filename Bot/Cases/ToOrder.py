from Bot.Shared.Connections import *
from Bot.Services.HelpServices import *

# –ù–∞—á–∞–ª–æ
@bot.message_handler(commands=['start'])
def start(message):
    delete_user_data(message.chat.id)
    adding_user_data(message.chat.id)
    delete_first_message(message.chat.id)
    user = get_requests.get_prop("users", "*", "tg_id", message.chat.id)
    if user is None:
        insert_requests.add_user(message.from_user.username, message.chat.id)
    global user_data
    user_data = UserData()

    user = get_requests.get_prop("users", "*", "tg_id", message.chat.id)
    insert_requests.add_order_begin(user[0], message.chat.id, message.from_user.username)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text='–†–µ—à–∏—Ç–µ –º–æ—é –∑–∞–¥–∞—á—É', callback_data='solve_problem'))
    sent_message = bot.send_message(message.chat.id,
                                    '–ú—ã —Ä–µ—à–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –¥–æ—Ä–æ–≥–µ –ø–æ–º–æ–µ–º –≤–∞—à –±–∞–π–∫, –∑–∞–ø—Ä–∞–≤–∏–º, –∞ —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ–≥–æ–Ω–∏–º –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –≤ –¥—Ä—É–≥—É—é.',
                                    reply_markup=keyboard)
    add_first_message(message.chat.id, sent_message.message_id)


# -----------------------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
def send_geolocation(message):
    user = get_requests.get_user_info(message.chat.id)
    if step_handler(message, 0, get_requests):
        if user[4] is not None:
            replyKeyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, row_width=2, resize_keyboard=True)
            btn1 = types.KeyboardButton(f"{user[4]}")
            btn2 = types.KeyboardButton('üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True)
            replyKeyboard.add(btn1, btn2)
            bot.send_message(message.chat.id,
                             '<b>–®–∞–≥ 1 –∏–∑ 5.</b>\n–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ —Ç–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ –≤–∞—à –±–∞–π–∫ - —Ç–æ–≥–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ.',
                             reply_markup=replyKeyboard, parse_mode="html")
            bot.register_next_step_handler(message, send_geolocation_listener)
        else:
            replyKeyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            replyKeyboard.add(types.KeyboardButton('üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é', request_location=True))
            bot.send_message(message.chat.id,
                             '<b>–®–∞–≥ 1 –∏–∑ 5.</b>\n–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –≤—ã —Å–µ–π—á–∞—Å –Ω–µ –≤ —Ç–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ –≤–∞—à –±–∞–π–∫ - —Ç–æ–≥–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø—Ä–∏—à–ª–∏—Ç–µ.',
                             reply_markup=replyKeyboard, parse_mode="html")
            bot.register_next_step_handler(message, send_geolocation_listener)


# –ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å, –∫–æ–≥–¥–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
@bot.message_handler(content_types=['location'])
def send_geolocation_listener(message):
    if step_handler(message, 0, get_requests):
        order = get_requests.get_last_order(message.chat.id)
        if message.location:
            update_requests.update_one_prop("users", "geolocation_coordinates",
                                            f"{message.location.longitude}:{message.location.latitude}", "tg_id",
                                            message.chat.id)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            replyKeyboard = types.ReplyKeyboardRemove()
            bot.send_message(message.chat.id,
                             '<b>–®–∞–≥ 2 –∏–∑ 5.</b>\n–£—Ç–æ—á–Ω–∏—Ç–µ –≥–¥–µ –Ω–∞–π—Ç–∏ –≤–∞—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è, —ç—Ç–∞–∂, –∫–æ–º–Ω–∞—Ç–∞.',
                             reply_markup=replyKeyboard, parse_mode="html")

            update_requests.update_one_prop("users", "step", 1, "tg_id", message.chat.id)
            update_requests.update_one_prop("orders", "geolocation_coordinates",
                                            f"{message.location.longitude}:{message.location.latitude}", "id", order[0])

            explain_geolocation(message)

        elif message.text and '/' not in message.text:
            update_requests.update_one_prop("users", "geolocation", message.text, "tg_id",
                                            message.chat.id)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            replyKeyboard = types.ReplyKeyboardRemove()
            bot.send_message(message.chat.id,
                             '<b>–®–∞–≥ 2 –∏–∑ 5.</b>\n–£—Ç–æ—á–Ω–∏—Ç–µ –≥–¥–µ –Ω–∞–π—Ç–∏ –≤–∞—Å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è, —ç—Ç–∞–∂, –∫–æ–º–Ω–∞—Ç–∞.',
                             reply_markup=replyKeyboard, parse_mode="html")
            update_requests.update_one_prop("users", "step", 1, "tg_id", message.chat.id)
            update_requests.update_one_prop("orders", "geolocation", message.text, "id", order[0])
            explain_geolocation(message)

        elif message.text == '/start':
            replyKeyboard = types.ReplyKeyboardRemove()
            sent_message = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=replyKeyboard)
            bot.delete_message(message.chat.id, sent_message.message_id)
            start(message)

        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='cancel'))
            keyboard.add(types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='solve_problem'))
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


# –£—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø–æ–≤–æ–¥—É –º–µ—Å—Ç–æ–Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
def explain_geolocation(message):
    if step_handler(message, 1, get_requests):
        bot.register_next_step_handler(message, explain_geolocation_listener)


def explain_geolocation_listener(message):
    if step_handler(message, 1, get_requests):
        if message.text and '/' not in message.text:
            update_requests.update_one_prop("users", "step", 2, "tg_id", message.chat.id)
            order = get_requests.get_last_order(message.chat.id)
            update_requests.update_one_prop("orders", "geolocation_explain", message.text, "id", order[0])
            send_contact(message)
        elif message.text == '/start':
            replyKeyboard = types.ReplyKeyboardRemove()
            sent_message = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=replyKeyboard)
            bot.delete_message(message.chat.id, sent_message.message_id)
            start(message)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='cancel'))
            keyboard.add(types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='explain_geolocation'))
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@bot.message_handler(content_types=['contact'])
def send_contact(message):
    if step_handler(message, 2, get_requests):
        replyKeyboard = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        replyKeyboard.add(types.KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è", request_contact=True))
        bot.send_message(message.chat.id,
                         '<b>–®–∞–≥ 3 –∏–∑ 5.</b>\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ –±—ã —Å –≤–∞–º–∏ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –º–æ–∂–Ω–æ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è',
                         reply_markup=replyKeyboard, parse_mode="html")
        bot.register_next_step_handler(message, send_contact_listener)


# –ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def send_contact_listener(message):
    if step_handler(message, 2, get_requests):
        if message.contact:
            update_requests.update_one_prop("users", "phone_number", message.contact.phone_number, "tg_id",
                                            message.chat.id)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞

            replyKeyboard = types.ReplyKeyboardRemove()
            sent_message = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=replyKeyboard)
            bot.delete_message(message.chat.id, sent_message.message_id)
            update_requests.update_one_prop("users", "step", 3, "tg_id", message.chat.id)

            order = get_requests.get_last_order(message.chat.id)
            update_requests.update_one_prop("orders", "phone_number", message.contact.phone_number, "id", order[0])

            service_choose(message)

        elif message.text == '/start':
            replyKeyboard = types.ReplyKeyboardRemove()
            sent_message = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=replyKeyboard)
            bot.delete_message(message.chat.id, sent_message.message_id)
            start(message)

        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='cancel'))
            keyboard.add(types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='send_contact'))
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


# –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
def service_choose(message):
    if step_handler(message, 3, get_requests):
        update_requests.update_one_prop('users', 'editing_services', 1, 'tg_id', message.chat.id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton('–ó–∞–ø—Ä–∞–≤–∏—Ç—å', callback_data='refuel'))
        keyboard.add(types.InlineKeyboardButton('–ü–æ–º—ã—Ç—å', callback_data='wash'))
        keyboard.add(types.InlineKeyboardButton('–û–±—Å–ª—É–∂–∏—Ç—å', callback_data='serve'))
        keyboard.add(types.InlineKeyboardButton('–ü–µ—Ä–µ–≥–Ω–∞—Ç—å', callback_data='overtake'))
        keyboard.add(types.InlineKeyboardButton('–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å –Ω–∞ –¥–æ—Ä–æ–≥–µ', callback_data='emergency'))
        keyboard.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å ‚úâÔ∏è', callback_data='to_order'))
        bot.send_message(message.chat.id, '<b>–®–∞–≥ 4 –∏–∑ 5.</b>\n–û—Ç–º–µ—Ç—å—Ç–µ, —á–µ–º –≤–∞–º –ø–æ–º–æ—á—å:', reply_markup=keyboard,
                         parse_mode="html")


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –Ω–∏—Ö
def generate_updated_keyboard(callback):
    services = getting_user_data(callback.from_user.id)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(f'–ó–∞–ø—Ä–∞–≤–∏—Ç—å{" ‚úÖ" if "refuel" in services else ""}',
                                            callback_data='refuel'))
    keyboard.add(
        types.InlineKeyboardButton(f'–ü–æ–º—ã—Ç—å{" ‚úÖ" if "wash" in services else ""}',
                                   callback_data='wash'))
    keyboard.add(
        types.InlineKeyboardButton(f'–û–±—Å–ª—É–∂–∏—Ç—å{" ‚úÖ" if "serve" in services else ""}',
                                   callback_data='serve'))
    keyboard.add(types.InlineKeyboardButton(f'–ü–µ—Ä–µ–≥–Ω–∞—Ç—å{" ‚úÖ" if "overtake" in services else ""}',
                                            callback_data='overtake'))
    keyboard.add(
        types.InlineKeyboardButton(
            f'–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å –Ω–∞ –¥–æ—Ä–æ–≥–µ{" ‚úÖ" if "emergency" in services else ""}',
            callback_data='emergency'))
    keyboard.add(types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å ‚úâÔ∏è', callback_data='to_order'))
    return keyboard


# –ó–∞–∫–∞–∑
def to_order(message):
    if step_handler(message, 3, get_requests):
        order = get_requests.get_last_order(message.chat.id)
        services = ', '.join(map(str, getting_user_data(message.chat.id)))

        update_requests.update_one_prop('users', 'editing_services', 0, 'tg_id', message.chat.id)
        update_requests.update_one_prop("orders", 'services', services, "id", order[0])

        bot.send_message(message.chat.id, '<b>–®–∞–≥ 5 –∏–∑ 5.</b>\n–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ —Å–∏—Ç—É–∞—Ü–∏—é', parse_mode="html")
        update_requests.update_one_prop("users", "step", 4, "tg_id", message.chat.id)
        bot.register_next_step_handler(message, to_order_listener)


# –ü—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
def to_order_listener(message):
    order = get_requests.get_last_order(message.chat.id)
    if step_handler(message, 4, get_requests):
        if message.text and '/' not in message.text:
            update_requests.update_one_prop("orders", "description", message.text, "id", order[0])
            bot.send_message(message.chat.id, "–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç")
            send_to_chat(message)
        elif message.text == '/start':
            replyKeyboard = types.ReplyKeyboardRemove()
            sent_message = bot.send_message(message.chat.id, '–ó–∞–≥—Ä—É–∑–∫–∞...', reply_markup=replyKeyboard)
            bot.delete_message(message.chat.id, sent_message.message_id)
            start(message)
        else:
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton('–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ', callback_data='cancel'))
            keyboard.add(types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å', callback_data='to_order'))
            bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–ø—Ä–æ—Å', reply_markup=keyboard)


# -----------------------------------------------------------------------------------------

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –ê–¥–º–∏–Ω–æ–≤
def send_to_chat(message):
    user = get_requests.get_user_info(message.chat.id)
    order = get_requests.get_last_order(message.chat.id)
    geolocation_coordinates = order[7]
    lon = None
    lat = None
    if geolocation_coordinates is not None:
        if len(geolocation_coordinates) == 19 and ':' in geolocation_coordinates:
            parts = geolocation_coordinates.split(':')
            if len(parts) == 2:
                lon = parts[0]
                lat = parts[1]

    services = translate_services(order)

    chat_link = f"https://t.me/{user[2]}"

    if lat and lon:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=chat_link))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è", callback_data='deal'))
        sent_message = bot.send_message(admin_chat_id,
                                        f"‚ö°Ô∏èÔ∏è–ó–∞–∫–∞–∑ ‚Ññ {order[0]}‚ö°Ô∏è \n–ù–∏–∫–Ω–µ–π–º - @{order[4]} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {order[5]} \n–ü—Ä–æ–±–ª–µ–º–∞ - {order[9]}\n–£—Ç–æ—á–Ω–µ–Ω–∏—è - {order[8]} \n–í–∏–¥—ã —Ä–∞–±–æ—Ç - {services} \n",
                                        reply_markup=keyboard)
        bot.send_location(admin_chat_id, lat, lon, reply_to_message_id=sent_message.message_id)
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=chat_link))
        keyboard.add(types.InlineKeyboardButton(text="–î–æ–≥–æ–≤–æ—Ä–∏–ª—Å—è", callback_data='deal'))
        sent_message = bot.send_message(admin_chat_id,
                                        f"‚ö°Ô∏èÔ∏è–ó–∞–∫–∞–∑ ‚Ññ {order[0]}‚ö°Ô∏è \n–ù–∏–∫–Ω–µ–π–º - @{order[4]} \n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {order[5]} \n–ü—Ä–æ–±–ª–µ–º–∞ - {order[9]}\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - {order[6]} \n–£—Ç–æ—á–Ω–µ–Ω–∏—è - {order[8]} \n–í–∏–¥—ã —Ä–∞–±–æ—Ç - {services} \n",
                                        reply_markup=keyboard)

    update_requests.update_order_message_id(sent_message.message_id,
                                            get_requests.get_last_order(message.chat.id)[0])
